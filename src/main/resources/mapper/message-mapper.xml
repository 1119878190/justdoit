<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.justodit.dao.MessageMapper">


    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFileds">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--查询所有会话   只显示最新的一条数据  status为2表示删除   from_id为1表示系统信息-->
    <select id="selectConversations" resultType="com.justodit.entity.Message" parameterType="integer">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id=#{userId} or to_id=#{userId})
            GROUP BY conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!--  查询当前用户的会话数量  -->
    <select id="selectConversationCount" resultType="integer">

        select count(m.maxid) from(
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id=#{userId} or to_id=#{userId})
            GROUP BY conversation_id
        )as m
    </select>

    <!-- 查询某个会话所包含的私信列表   -->
    <select id="selectLetters" resultType="com.justodit.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id =#{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!--  查询寻某个会话所包含的私信数量  -->
    <select id="selectLetterCount" resultType="integer">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and  conversation_id = #{conversationId}
    </select>

    <!--  查询未读私信的数量  -->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--    发送 增加消息-->
    <insert id="insertMessage" parameterType="com.justodit.entity.Message" keyProperty="id" keyColumn="id">
            insert into message(<include refid="insertFileds"></include>)
            values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!-- 修改消息状态  已读   -->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

<!--  系统通知  -->
    <!--  查询某个主题下的最新的通知  -->
    <select id="selectLatestNotice" resultType="com.justodit.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

    <!--    查询某个主题所包含的通知的数量-->
    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <!--    查询未读的通知的数量  如果不传topic就说明查询所有的系统通知数量-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <!--  查询某个主题的通知列表  -->
    <select id="selectNotices" resultType="com.justodit.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset},#{limit}
    </select>



</mapper>